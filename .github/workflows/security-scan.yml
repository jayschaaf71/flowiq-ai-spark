name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        echo "Running npm security audit..."
        npm audit --audit-level=moderate --json > audit-results.json || true
        
    - name: Parse audit results
      run: |
        echo "Parsing audit results..."
        if [ -f audit-results.json ]; then
          VULNERABILITIES=$(jq '.metadata.vulnerabilities.total' audit-results.json)
          echo "Found $VULNERABILITIES vulnerabilities"
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "❌ Security vulnerabilities found"
            exit 1
          else
            echo "✅ No security vulnerabilities found"
          fi
        fi
        
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: audit-results
        path: audit-results.json

  # Code Security Analysis
  code-security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
        outputFormat: sarif
        outputFile: semgrep-results.sarif
        
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep-results.sarif
        
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results.sarif

  # Secrets Detection
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: HEAD~1
        head: HEAD
        extra_args: --only-verified
        
    - name: Run GitGuardian secrets scan
      uses: GitGuardian/ggshield-action@main
      with:
        mode: scan
        exit-zero: false

  # Environment Security Check
  environment-security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for hardcoded secrets..."
        
        # Check for API keys in code
        if grep -r "sk-[a-zA-Z0-9]{48}" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "❌ Found potential OpenAI API keys in code"
          exit 1
        fi
        
        # Check for Supabase keys
        if grep -r "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "❌ Found potential Supabase keys in code"
          exit 1
        fi
        
        # Check for other common secret patterns
        if grep -r "password.*=.*['\"][^'\"]*['\"]" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "⚠️ Found potential hardcoded passwords"
        fi
        
        echo "✅ No hardcoded secrets found"
        
    - name: Check environment variable usage
      run: |
        echo "Checking environment variable usage..."
        
        # Check for proper env var usage
        if grep -r "process\.env\." src/ --include="*.ts" --include="*.tsx" --include="*.js"; then
          echo "✅ Environment variables properly used"
        else
          echo "⚠️ No environment variables found in code"
        fi
        
        # Check for Vite env vars
        if grep -r "import\.meta\.env\." src/ --include="*.ts" --include="*.tsx"; then
          echo "✅ Vite environment variables properly used"
        fi

  # Supabase Security Check
  supabase-security:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Supabase CLI
      run: npm install -g supabase
      
    - name: Check RLS policies
      run: |
        echo "Checking Row Level Security policies..."
        
        # Check for RLS policies in migrations
        RLS_COUNT=$(grep -r "ENABLE ROW LEVEL SECURITY\|CREATE POLICY" supabase/migrations/ | wc -l)
        echo "Found $RLS_COUNT RLS policy references"
        
        if [ "$RLS_COUNT" -eq 0 ]; then
          echo "⚠️ No RLS policies found in migrations"
        else
          echo "✅ RLS policies found"
        fi
        
    - name: Check for sensitive data exposure
      run: |
        echo "Checking for sensitive data exposure..."
        
        # Check for potential PHI exposure
        if grep -r "patient.*name\|medical.*record\|diagnosis" src/ --include="*.ts" --include="*.tsx" -i; then
          echo "⚠️ Potential PHI references found in code"
        fi
        
        # Check for audit logging
        if grep -r "audit\|log.*access\|track.*user" src/ --include="*.ts" --include="*.tsx" -i; then
          echo "✅ Audit logging found"
        else
          echo "⚠️ No audit logging found"
        fi

  # Security Report Generation
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secrets-scan, environment-security, supabase-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Generate security report
      run: |
        echo "Generating security report..."
        echo "## Security Scan Report" > security-report.md
        echo "- Date: $(date)" >> security-report.md
        echo "- Branch: ${{ github.ref_name }}" >> security-report.md
        echo "- Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "### Scan Results" >> security-report.md
        
        # Dependency scan results
        if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
          echo "- Dependency Scan: ✅ Passed" >> security-report.md
        else
          echo "- Dependency Scan: ❌ Failed" >> security-report.md
        fi
        
        # Code security results
        if [ "${{ needs.code-security.result }}" == "success" ]; then
          echo "- Code Security: ✅ Passed" >> security-report.md
        else
          echo "- Code Security: ❌ Failed" >> security-report.md
        fi
        
        # Secrets scan results
        if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
          echo "- Secrets Scan: ✅ Passed" >> security-report.md
        else
          echo "- Secrets Scan: ❌ Failed" >> security-report.md
        fi
        
        # Environment security results
        if [ "${{ needs.environment-security.result }}" == "success" ]; then
          echo "- Environment Security: ✅ Passed" >> security-report.md
        else
          echo "- Environment Security: ❌ Failed" >> security-report.md
        fi
        
        # Supabase security results
        if [ "${{ needs.supabase-security.result }}" == "success" ]; then
          echo "- Supabase Security: ✅ Passed" >> security-report.md
        else
          echo "- Supabase Security: ❌ Failed" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### Recommendations" >> security-report.md
        echo "- Review any failed scans immediately" >> security-report.md
        echo "- Update dependencies regularly" >> security-report.md
        echo "- Monitor for new vulnerabilities" >> security-report.md
        echo "- Ensure RLS policies are properly configured" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${report}`
          }); 