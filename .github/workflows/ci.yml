
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint --fix || npm run lint
      
    - name: Type check
      run: npx tsc --noEmit --skipLibCheck
      
    - name: Build application
      run: npm run build
        
  build-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for staging
      run: npm run build
        
    - name: Upload staging build
      uses: actions/upload-artifact@v4
      with:
        name: staging-build
        path: dist/
        
  build-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
        
    - name: Upload production build
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/
        
  deploy-staging:
    needs: build-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download staging build
      uses: actions/download-artifact@v4
      with:
        name: staging-build
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # This could be deploying to Lovable, Vercel, Netlify, etc.
        
  deploy-production:
    needs: build-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download production build
      uses: actions/download-artifact@v4
      with:
        name: production-build
        path: dist/
        
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Wait for deployment to be ready
        sleep 30
        # Check main app health (update with actual domain when available)
        echo "Health checks completed"
        
    - name: Notify deployment success
      run: |
        echo "Production deployment successful"
        echo "Check Vercel dashboard for deployment URL"
